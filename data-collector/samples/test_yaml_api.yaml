openapi: 3.0.0
info:
  title: Test YAML API
  description: A test API using YAML format
  version: 1.0.0
  contact:
    name: YAML Test Team
    email: yaml@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yaml-test.com/v1
    description: Production server
  - url: https://staging-api.yaml-test.com/v1
    description: Staging server

security:
  - ApiKeyAuth: []

paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
    
    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user in the system
      operationId: createUser
      requestBody:
        description: User object to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
            example:
              name: John Doe
              email: john@example.com
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
        name:
          type: string
          description: User's full name
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          description: User's email address
        created_at:
          type: string
          format: date-time
          description: When the user was created
        profile:
          $ref: '#/components/schemas/UserProfile'
    
    NewUser:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: User's full name
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          description: User's email address
        profile:
          $ref: '#/components/schemas/UserProfile'
    
    UserProfile:
      type: object
      properties:
        bio:
          type: string
          description: User's biography
        avatar_url:
          type: string
          format: uri
          description: URL to user's avatar image
        preferences:
          type: object
          properties:
            theme:
              type: string
              enum:
                - light
                - dark
              default: light
            notifications:
              type: boolean
              default: true
    
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: string
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
